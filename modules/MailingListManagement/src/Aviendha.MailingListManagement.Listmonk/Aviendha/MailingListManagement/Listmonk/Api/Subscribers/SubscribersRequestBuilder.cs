// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Models;
using CPCA.Listmonk.Api.Subscribers.Blocklist;
using CPCA.Listmonk.Api.Subscribers.Item;
using CPCA.Listmonk.Api.Subscribers.Lists;
using CPCA.Listmonk.Api.Subscribers.Query;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CPCA.Listmonk.Api.Subscribers
{
    /// <summary>
    /// Builds and executes requests for operations under \subscribers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SubscribersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The blocklist property</summary>
        public global::CPCA.Listmonk.Api.Subscribers.Blocklist.BlocklistRequestBuilder Blocklist
        {
            get => new global::CPCA.Listmonk.Api.Subscribers.Blocklist.BlocklistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lists property</summary>
        public global::CPCA.Listmonk.Api.Subscribers.Lists.ListsRequestBuilder Lists
        {
            get => new global::CPCA.Listmonk.Api.Subscribers.Lists.ListsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The query property</summary>
        public global::CPCA.Listmonk.Api.Subscribers.Query.QueryRequestBuilder Query
        {
            get => new global::CPCA.Listmonk.Api.Subscribers.Query.QueryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the CPCA.Listmonk.Api.subscribers.item collection</summary>
        /// <param name="position">The id value of the subscriber you want to get.</param>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Subscribers.Item.SubscribersItemRequestBuilder"/></returns>
        public global::CPCA.Listmonk.Api.Subscribers.Item.SubscribersItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::CPCA.Listmonk.Api.Subscribers.Item.SubscribersItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubscribersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/subscribers?id={id}{&list_id*,order*,order_by*,page*,per_page*,query*,subscription_status*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubscribersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/subscribers?id={id}{&list_id*,order*,order_by*,page*,per_page*,query*,subscription_status*}", rawUrl)
        {
        }
        /// <summary>
        /// handles subscribers deletion
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Subscribers.SubscribersDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Subscribers.SubscribersDeleteResponse?> DeleteAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Subscribers.SubscribersDeleteResponse> DeleteAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Subscribers.SubscribersDeleteResponse>(requestInfo, global::CPCA.Listmonk.Api.Subscribers.SubscribersDeleteResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// returns all subscribers.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Subscribers.SubscribersGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Subscribers.SubscribersGetResponse?> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Subscribers.SubscribersGetResponse> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Subscribers.SubscribersGetResponse>(requestInfo, global::CPCA.Listmonk.Api.Subscribers.SubscribersGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles creation of new subscriber
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Subscribers.SubscribersPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Subscribers.SubscribersPostResponse?> PostAsync(global::CPCA.Listmonk.Api.Models.NewSubscriber body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Subscribers.SubscribersPostResponse> PostAsync(global::CPCA.Listmonk.Api.Models.NewSubscriber body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Subscribers.SubscribersPostResponse>(requestInfo, global::CPCA.Listmonk.Api.Subscribers.SubscribersPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles subscribers deletion
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/subscribers?id={id}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// returns all subscribers.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder.SubscribersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, "{+baseurl}/subscribers{?list_id*,order*,order_by*,page*,per_page*,query*,subscription_status*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handles creation of new subscriber
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.NewSubscriber body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.NewSubscriber body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/subscribers", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// handles subscribers deletion
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubscribersRequestBuilderDeleteQueryParameters 
        {
            /// <summary>subscriber id/s to be deleted</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("id")]
            public string? Id { get; set; }
#nullable restore
#else
            [QueryParameter("id")]
            public string Id { get; set; }
#endif
        }
        /// <summary>
        /// returns all subscribers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubscribersRequestBuilderGetQueryParameters 
        {
            /// <summary>ID of lists to filter by. Repeat in the query for multiple values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("list_id")]
            public int?[]? ListId { get; set; }
#nullable restore
#else
            [QueryParameter("list_id")]
            public int?[] ListId { get; set; }
#endif
            /// <summary>ASC|DESC Sort by ascending or descending order.</summary>
            [QueryParameter("order")]
            public global::CPCA.Listmonk.Api.Subscribers.GetOrderQueryParameterType? Order { get; set; }
            /// <summary>Result sorting field. Options are name, status, created_at, updated_at</summary>
            [QueryParameter("order_by")]
            public global::CPCA.Listmonk.Api.Subscribers.GetOrder_byQueryParameterType? OrderBy { get; set; }
            /// <summary>Page number for paginated results.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items per page. Use an integer for specific page size or &apos;all&apos; to retrieve all results</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>query subscribers with an SQL expression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
            /// <summary>Subscription status to filter by if there are one or more list_ids.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subscription_status")]
            public string? SubscriptionStatus { get; set; }
#nullable restore
#else
            [QueryParameter("subscription_status")]
            public string SubscriptionStatus { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
