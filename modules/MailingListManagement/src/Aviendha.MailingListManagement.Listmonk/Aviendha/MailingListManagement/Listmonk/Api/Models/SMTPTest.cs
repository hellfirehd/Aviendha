// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CPCA.Listmonk.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SMTPTest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The auth_protocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthProtocol { get; set; }
#nullable restore
#else
        public string AuthProtocol { get; set; }
#endif
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The email_headers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::CPCA.Listmonk.Api.Models.SMTPTest_email_headers>? EmailHeaders { get; set; }
#nullable restore
#else
        public List<global::CPCA.Listmonk.Api.Models.SMTPTest_email_headers> EmailHeaders { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The hello_hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HelloHostname { get; set; }
#nullable restore
#else
        public string HelloHostname { get; set; }
#endif
        /// <summary>The host property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Host { get; set; }
#nullable restore
#else
        public string Host { get; set; }
#endif
        /// <summary>The idle_timeout property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdleTimeout { get; set; }
#nullable restore
#else
        public string IdleTimeout { get; set; }
#endif
        /// <summary>The max_conns property</summary>
        public int? MaxConns { get; set; }
        /// <summary>The max_msg_retries property</summary>
        public int? MaxMsgRetries { get; set; }
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The port property</summary>
        public int? Port { get; set; }
        /// <summary>The strEmailHeaders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StrEmailHeaders { get; set; }
#nullable restore
#else
        public string StrEmailHeaders { get; set; }
#endif
        /// <summary>The tls_skip_verify property</summary>
        public bool? TlsSkipVerify { get; set; }
        /// <summary>The tls_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TlsType { get; set; }
#nullable restore
#else
        public string TlsType { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>The uuid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>The wait_timeout property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WaitTimeout { get; set; }
#nullable restore
#else
        public string WaitTimeout { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Models.SMTPTest"/> and sets the default values.
        /// </summary>
        public SMTPTest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Models.SMTPTest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CPCA.Listmonk.Api.Models.SMTPTest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CPCA.Listmonk.Api.Models.SMTPTest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auth_protocol", n => { AuthProtocol = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "email_headers", n => { EmailHeaders = n.GetCollectionOfObjectValues<global::CPCA.Listmonk.Api.Models.SMTPTest_email_headers>(global::CPCA.Listmonk.Api.Models.SMTPTest_email_headers.CreateFromDiscriminatorValue)?.AsList(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "hello_hostname", n => { HelloHostname = n.GetStringValue(); } },
                { "host", n => { Host = n.GetStringValue(); } },
                { "idle_timeout", n => { IdleTimeout = n.GetStringValue(); } },
                { "max_conns", n => { MaxConns = n.GetIntValue(); } },
                { "max_msg_retries", n => { MaxMsgRetries = n.GetIntValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "strEmailHeaders", n => { StrEmailHeaders = n.GetStringValue(); } },
                { "tls_skip_verify", n => { TlsSkipVerify = n.GetBoolValue(); } },
                { "tls_type", n => { TlsType = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetStringValue(); } },
                { "wait_timeout", n => { WaitTimeout = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("auth_protocol", AuthProtocol);
            writer.WriteStringValue("email", Email);
            writer.WriteCollectionOfObjectValues<global::CPCA.Listmonk.Api.Models.SMTPTest_email_headers>("email_headers", EmailHeaders);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("hello_hostname", HelloHostname);
            writer.WriteStringValue("host", Host);
            writer.WriteStringValue("idle_timeout", IdleTimeout);
            writer.WriteIntValue("max_conns", MaxConns);
            writer.WriteIntValue("max_msg_retries", MaxMsgRetries);
            writer.WriteStringValue("password", Password);
            writer.WriteIntValue("port", Port);
            writer.WriteStringValue("strEmailHeaders", StrEmailHeaders);
            writer.WriteBoolValue("tls_skip_verify", TlsSkipVerify);
            writer.WriteStringValue("tls_type", TlsType);
            writer.WriteStringValue("username", Username);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteStringValue("wait_timeout", WaitTimeout);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
