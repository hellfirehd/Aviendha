// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CPCA.Listmonk.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubscriberQueryRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Whether to add, remove, or unsubscribe the users.</summary>
        public global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest_action? Action { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ids of the subscribers to be modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Ids { get; set; }
#nullable restore
#else
        public List<int?> Ids { get; set; }
#endif
        /// <summary>The query property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Query { get; set; }
#nullable restore
#else
        public string Query { get; set; }
#endif
        /// <summary>confirmed, unconfirmed, or unsubscribed status.</summary>
        public global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest_status? Status { get; set; }
        /// <summary>The ids of the lists to be modified.</summary>
        public int? TargetListIds { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest"/> and sets the default values.
        /// </summary>
        public SubscriberQueryRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetEnumValue<global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest_action>(); } },
                { "ids", n => { Ids = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "query", n => { Query = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest_status>(); } },
                { "target_list_ids", n => { TargetListIds = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest_action>("action", Action);
            writer.WriteCollectionOfPrimitiveValues<int?>("ids", Ids);
            writer.WriteStringValue("query", Query);
            writer.WriteEnumValue<global::CPCA.Listmonk.Api.Models.SubscriberQueryRequest_status>("status", Status);
            writer.WriteIntValue("target_list_ids", TargetListIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
