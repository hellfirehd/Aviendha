// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Lists.Item;
using CPCA.Listmonk.Api.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CPCA.Listmonk.Api.Lists
{
    /// <summary>
    /// Builds and executes requests for operations under \lists
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ListsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the CPCA.Listmonk.Api.lists.item collection</summary>
        /// <param name="position">The id value of the list you want to retreive.</param>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Lists.Item.WithList_ItemRequestBuilder"/></returns>
        public global::CPCA.Listmonk.Api.Lists.Item.WithList_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("list_id", position);
                return new global::CPCA.Listmonk.Api.Lists.Item.WithList_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ListsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/lists{?minimal*,order*,order_by*,page*,per_page*,query*,tag*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ListsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/lists{?minimal*,order*,order_by*,page*,per_page*,query*,tag*}", rawUrl)
        {
        }
        /// <summary>
        /// retrieves lists with additional metadata like subscriber counts. This may be slow.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Lists.ListsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Lists.ListsGetResponse?> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder.ListsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Lists.ListsGetResponse> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder.ListsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Lists.ListsGetResponse>(requestInfo, global::CPCA.Listmonk.Api.Lists.ListsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles list creation
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Lists.ListsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Lists.ListsPostResponse?> PostAsync(global::CPCA.Listmonk.Api.Models.NewList body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Lists.ListsPostResponse> PostAsync(global::CPCA.Listmonk.Api.Models.NewList body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Lists.ListsPostResponse>(requestInfo, global::CPCA.Listmonk.Api.Lists.ListsPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// retrieves lists with additional metadata like subscriber counts. This may be slow.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder.ListsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder.ListsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handles list creation
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.NewList body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.NewList body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// retrieves lists with additional metadata like subscriber counts. This may be slow.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ListsRequestBuilderGetQueryParameters 
        {
            /// <summary>When set to true, returns response without body content</summary>
            [QueryParameter("minimal")]
            public bool? Minimal { get; set; }
            /// <summary>ASC|DESC Sort by ascending or descending order.</summary>
            [QueryParameter("order")]
            public global::CPCA.Listmonk.Api.Lists.GetOrderQueryParameterType? Order { get; set; }
            /// <summary>Field to sort results by. name|status|created_at|updated_at</summary>
            [QueryParameter("order_by")]
            public global::CPCA.Listmonk.Api.Lists.GetOrder_byQueryParameterType? OrderBy { get; set; }
            /// <summary>total number of pages</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>number of items per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Optional string to search a list by name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
            /// <summary>Tags to filter lists. Repeat in the query for multiple values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tag")]
            public string[]? Tag { get; set; }
#nullable restore
#else
            [QueryParameter("tag")]
            public string[] Tag { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
