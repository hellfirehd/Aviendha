// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Models;
using CPCA.Listmonk.Api.Templates.Item;
using CPCA.Listmonk.Api.Templates.Preview;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CPCA.Listmonk.Api.Templates
{
    /// <summary>
    /// Builds and executes requests for operations under \templates
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TemplatesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The preview property</summary>
        public global::CPCA.Listmonk.Api.Templates.Preview.PreviewRequestBuilder Preview
        {
            get => new global::CPCA.Listmonk.Api.Templates.Preview.PreviewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the CPCA.Listmonk.Api.templates.item collection</summary>
        /// <param name="position">The id value of the template you want to get.</param>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Templates.Item.TemplatesItemRequestBuilder"/></returns>
        public global::CPCA.Listmonk.Api.Templates.Item.TemplatesItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::CPCA.Listmonk.Api.Templates.Item.TemplatesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TemplatesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/templates?no_body={no_body}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TemplatesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/templates?no_body={no_body}", rawUrl)
        {
        }
        /// <summary>
        /// handles retrieval of templates
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Templates.TemplatesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Templates.TemplatesGetResponse?> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder.TemplatesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Templates.TemplatesGetResponse> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder.TemplatesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Templates.TemplatesGetResponse>(requestInfo, global::CPCA.Listmonk.Api.Templates.TemplatesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles template creation
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Templates.TemplatesPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Templates.TemplatesPostResponse?> PostAsync(global::CPCA.Listmonk.Api.Models.NewTemplate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Templates.TemplatesPostResponse> PostAsync(global::CPCA.Listmonk.Api.Models.NewTemplate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Templates.TemplatesPostResponse>(requestInfo, global::CPCA.Listmonk.Api.Templates.TemplatesPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles retrieval of templates
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder.TemplatesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder.TemplatesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handles template creation
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.NewTemplate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.NewTemplate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/templates", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// handles retrieval of templates
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TemplatesRequestBuilderGetQueryParameters 
        {
            /// <summary>boolean flag for response with/without body</summary>
            [QueryParameter("no_body")]
            public bool? NoBody { get; set; }
        }
    }
}
#pragma warning restore CS0618
