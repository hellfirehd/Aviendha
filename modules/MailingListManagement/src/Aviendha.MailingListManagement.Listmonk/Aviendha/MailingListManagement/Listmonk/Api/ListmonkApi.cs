// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Admin;
using CPCA.Listmonk.Api.Bounces;
using CPCA.Listmonk.Api.Campaigns;
using CPCA.Listmonk.Api.Config;
using CPCA.Listmonk.Api.Dashboard;
using CPCA.Listmonk.Api.Health;
using CPCA.Listmonk.Api.Import;
using CPCA.Listmonk.Api.Lang;
using CPCA.Listmonk.Api.Lists;
using CPCA.Listmonk.Api.Logs;
using CPCA.Listmonk.Api.Maintenance;
using CPCA.Listmonk.Api.Media;
using CPCA.Listmonk.Api.Public;
using CPCA.Listmonk.Api.Settings;
using CPCA.Listmonk.Api.Subscribers;
using CPCA.Listmonk.Api.Templates;
using CPCA.Listmonk.Api.Tx;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace CPCA.Listmonk.Api
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ListmonkApi : BaseRequestBuilder
    {
        /// <summary>The admin property</summary>
        public global::CPCA.Listmonk.Api.Admin.AdminRequestBuilder Admin
        {
            get => new global::CPCA.Listmonk.Api.Admin.AdminRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bounces property</summary>
        public global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder Bounces
        {
            get => new global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The campaigns property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder Campaigns
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The config property</summary>
        public global::CPCA.Listmonk.Api.Config.ConfigRequestBuilder Config
        {
            get => new global::CPCA.Listmonk.Api.Config.ConfigRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dashboard property</summary>
        public global::CPCA.Listmonk.Api.Dashboard.DashboardRequestBuilder Dashboard
        {
            get => new global::CPCA.Listmonk.Api.Dashboard.DashboardRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The health property</summary>
        public global::CPCA.Listmonk.Api.Health.HealthRequestBuilder Health
        {
            get => new global::CPCA.Listmonk.Api.Health.HealthRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The import property</summary>
        public global::CPCA.Listmonk.Api.Import.ImportRequestBuilder Import
        {
            get => new global::CPCA.Listmonk.Api.Import.ImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lang property</summary>
        public global::CPCA.Listmonk.Api.Lang.LangRequestBuilder Lang
        {
            get => new global::CPCA.Listmonk.Api.Lang.LangRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lists property</summary>
        public global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder Lists
        {
            get => new global::CPCA.Listmonk.Api.Lists.ListsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logs property</summary>
        public global::CPCA.Listmonk.Api.Logs.LogsRequestBuilder Logs
        {
            get => new global::CPCA.Listmonk.Api.Logs.LogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The maintenance property</summary>
        public global::CPCA.Listmonk.Api.Maintenance.MaintenanceRequestBuilder Maintenance
        {
            get => new global::CPCA.Listmonk.Api.Maintenance.MaintenanceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The media property</summary>
        public global::CPCA.Listmonk.Api.Media.MediaRequestBuilder Media
        {
            get => new global::CPCA.Listmonk.Api.Media.MediaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The public property</summary>
        public global::CPCA.Listmonk.Api.Public.PublicRequestBuilder Public
        {
            get => new global::CPCA.Listmonk.Api.Public.PublicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::CPCA.Listmonk.Api.Settings.SettingsRequestBuilder Settings
        {
            get => new global::CPCA.Listmonk.Api.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscribers property</summary>
        public global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder Subscribers
        {
            get => new global::CPCA.Listmonk.Api.Subscribers.SubscribersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The templates property</summary>
        public global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder Templates
        {
            get => new global::CPCA.Listmonk.Api.Templates.TemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tx property</summary>
        public global::CPCA.Listmonk.Api.Tx.TxRequestBuilder Tx
        {
            get => new global::CPCA.Listmonk.Api.Tx.TxRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.ListmonkApi"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ListmonkApi(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "http://localhost:9000/api";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
