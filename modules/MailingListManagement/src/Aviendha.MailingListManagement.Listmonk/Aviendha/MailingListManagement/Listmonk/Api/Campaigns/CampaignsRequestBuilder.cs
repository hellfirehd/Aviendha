// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Campaigns.Analytics;
using CPCA.Listmonk.Api.Campaigns.Item;
using CPCA.Listmonk.Api.Campaigns.Running;
using CPCA.Listmonk.Api.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CPCA.Listmonk.Api.Campaigns
{
    /// <summary>
    /// Builds and executes requests for operations under \campaigns
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CampaignsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The analytics property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Analytics.AnalyticsRequestBuilder Analytics
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Analytics.AnalyticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The running property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Running.RunningRequestBuilder Running
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Running.RunningRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the CPCA.Listmonk.Api.campaigns.item collection</summary>
        /// <param name="position">The id value of the campaign you want to get.</param>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder"/></returns>
        public global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CampaignsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/campaigns{?no_body*,order*,order_by*,page*,per_page*,query*,status*,tags*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CampaignsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/campaigns{?no_body*,order*,order_by*,page*,per_page*,query*,status*,tags*}", rawUrl)
        {
        }
        /// <summary>
        /// handles retrieval of campaigns
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.CampaignsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Campaigns.CampaignsGetResponse?> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder.CampaignsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Campaigns.CampaignsGetResponse> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder.CampaignsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Campaigns.CampaignsGetResponse>(requestInfo, global::CPCA.Listmonk.Api.Campaigns.CampaignsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles campaign creation
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.CampaignsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Campaigns.CampaignsPostResponse?> PostAsync(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Campaigns.CampaignsPostResponse> PostAsync(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Campaigns.CampaignsPostResponse>(requestInfo, global::CPCA.Listmonk.Api.Campaigns.CampaignsPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles retrieval of campaigns
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder.CampaignsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder.CampaignsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handles campaign creation
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CPCA.Listmonk.Api.Campaigns.CampaignsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// handles retrieval of campaigns
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CampaignsRequestBuilderGetQueryParameters 
        {
            /// <summary>When set to true, returns response without body content</summary>
            [QueryParameter("no_body")]
            public bool? NoBody { get; set; }
            /// <summary>Determines the sort order of results. ASC for ascending, DESC for descending order</summary>
            [QueryParameter("order")]
            public global::CPCA.Listmonk.Api.Campaigns.GetOrderQueryParameterType? Order { get; set; }
            /// <summary>Specifies the field by which to sort the campaigns. Available options are &apos;name&apos;, &apos;status&apos;, &apos;created_at&apos;, and &apos;updated_at&apos;</summary>
            [QueryParameter("order_by")]
            public global::CPCA.Listmonk.Api.Campaigns.GetOrder_byQueryParameterType? OrderBy { get; set; }
            /// <summary>Page number for paginated results.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items per page. Use an integer for specific page size or &apos;all&apos; to retrieve all results</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>SQL query expression to filter campaigns by custom criteria</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
            /// <summary>Filter campaigns by status. Multiple status values can be specified by repeating the parameter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public global::CPCA.Listmonk.Api.Campaigns.GetStatusQueryParameterType[]? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public global::CPCA.Listmonk.Api.Campaigns.GetStatusQueryParameterType[] Status { get; set; }
#endif
            /// <summary>Filter campaigns by tags. Multiple tags can be specified by repeating the parameter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tags")]
            public string[]? Tags { get; set; }
#nullable restore
#else
            [QueryParameter("tags")]
            public string[] Tags { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
