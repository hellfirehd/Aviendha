// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Campaigns.Item.Archive;
using CPCA.Listmonk.Api.Campaigns.Item.Content;
using CPCA.Listmonk.Api.Campaigns.Item.Preview;
using CPCA.Listmonk.Api.Campaigns.Item.Status;
using CPCA.Listmonk.Api.Campaigns.Item.Test;
using CPCA.Listmonk.Api.Campaigns.Item.Text;
using CPCA.Listmonk.Api.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CPCA.Listmonk.Api.Campaigns.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \campaigns\{id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CampaignsItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The archive property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Item.Archive.ArchiveRequestBuilder Archive
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Item.Archive.ArchiveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The content property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Item.Content.ContentRequestBuilder Content
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Item.Content.ContentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The preview property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Item.Preview.PreviewRequestBuilder Preview
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Item.Preview.PreviewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Item.Status.StatusRequestBuilder Status
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Item.Status.StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The test property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Item.Test.TestRequestBuilder Test
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Item.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The text property</summary>
        public global::CPCA.Listmonk.Api.Campaigns.Item.Text.TextRequestBuilder Text
        {
            get => new global::CPCA.Listmonk.Api.Campaigns.Item.Text.TextRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CampaignsItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/campaigns/{id}{?no_body*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CampaignsItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/campaigns/{id}{?no_body*}", rawUrl)
        {
        }
        /// <summary>
        /// deletes specified campaign
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsDeleteResponse?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsDeleteResponse> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsDeleteResponse>(requestInfo, global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsDeleteResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles retrieval of campaigns.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsGetResponse?> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder.CampaignsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsGetResponse> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder.CampaignsItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsGetResponse>(requestInfo, global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handle updation of campaign
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsPutResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsPutResponse?> PutAsync(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsPutResponse> PutAsync(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsPutResponse>(requestInfo, global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsPutResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// deletes specified campaign
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handles retrieval of campaigns.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder.CampaignsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder.CampaignsItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handle updation of campaign
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::CPCA.Listmonk.Api.Models.CampaignRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CPCA.Listmonk.Api.Campaigns.Item.CampaignsItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// handles retrieval of campaigns.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CampaignsItemRequestBuilderGetQueryParameters 
        {
            /// <summary>boolean flag for response with/without body</summary>
            [QueryParameter("no_body")]
            public bool? NoBody { get; set; }
        }
    }
}
#pragma warning restore CS0618
