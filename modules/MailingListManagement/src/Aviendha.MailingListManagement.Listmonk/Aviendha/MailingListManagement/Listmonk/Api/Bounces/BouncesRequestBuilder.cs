// <auto-generated/>
#pragma warning disable CS0618
using CPCA.Listmonk.Api.Bounces.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CPCA.Listmonk.Api.Bounces
{
    /// <summary>
    /// Builds and executes requests for operations under \bounces
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BouncesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the CPCA.Listmonk.Api.bounces.item collection</summary>
        /// <param name="position">The id value of the bounce you want to retreive.</param>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Bounces.Item.BouncesItemRequestBuilder"/></returns>
        public global::CPCA.Listmonk.Api.Bounces.Item.BouncesItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::CPCA.Listmonk.Api.Bounces.Item.BouncesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BouncesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bounces{?all*,campaign_id*,id*,order*,order_by*,page*,per_page*,source*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BouncesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bounces{?all*,campaign_id*,id*,order*,order_by*,page*,per_page*,source*}", rawUrl)
        {
        }
        /// <summary>
        /// handles retrieval of bounce records.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Bounces.BouncesDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Bounces.BouncesDeleteResponse?> DeleteAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Bounces.BouncesDeleteResponse> DeleteAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Bounces.BouncesDeleteResponse>(requestInfo, global::CPCA.Listmonk.Api.Bounces.BouncesDeleteResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles retrieval of bounce records.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Bounces.BouncesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CPCA.Listmonk.Api.Bounces.BouncesGetResponse?> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CPCA.Listmonk.Api.Bounces.BouncesGetResponse> GetAsync(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CPCA.Listmonk.Api.Bounces.BouncesGetResponse>(requestInfo, global::CPCA.Listmonk.Api.Bounces.BouncesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// handles retrieval of bounce records.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// handles retrieval of bounce records.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder.BouncesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CPCA.Listmonk.Api.Bounces.BouncesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// handles retrieval of bounce records.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BouncesRequestBuilderDeleteQueryParameters 
        {
            /// <summary>flag for multiple bounce record deletion</summary>
            [QueryParameter("all")]
            public bool? All { get; set; }
            /// <summary>list of bounce ids to delete</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("id")]
            public string? Id { get; set; }
#nullable restore
#else
            [QueryParameter("id")]
            public string Id { get; set; }
#endif
        }
        /// <summary>
        /// handles retrieval of bounce records.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BouncesRequestBuilderGetQueryParameters 
        {
            /// <summary>Numeric identifier for retrieving bounce records associated with a specific campaign</summary>
            [QueryParameter("campaign_id")]
            public int? CampaignId { get; set; }
            /// <summary>Determines the sort order of results. Use &apos;asc&apos; for ascending or &apos;desc&apos; for descending order</summary>
            [QueryParameter("order")]
            public global::CPCA.Listmonk.Api.Bounces.GetOrderQueryParameterType? Order { get; set; }
            /// <summary>Specifies the field by which to sort the bounce records. Available options are &apos;email&apos;, &apos;campaign_name&apos;, &apos;source&apos;, and &apos;created_at&apos;</summary>
            [QueryParameter("order_by")]
            public global::CPCA.Listmonk.Api.Bounces.GetOrder_byQueryParameterType? OrderBy { get; set; }
            /// <summary>Page number for paginated results. Start from 1 for the first page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items per page. Use an integer for specific page size or &apos;all&apos; to retrieve all results</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Filter bounce records by their source of origin</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("source")]
            public string? Source { get; set; }
#nullable restore
#else
            [QueryParameter("source")]
            public string Source { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
